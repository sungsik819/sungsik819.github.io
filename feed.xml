<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
<channel>
<atom:link href='http://dev-happy.com/' rel='self' type='application/rss+xml'/>
<title>
Dev Happy
</title>
<link>
http://dev-happy.com/
</link>
<description>
개발 관련 경험 및 성찰들을 기록
</description>
<lastBuildDate>
Tue, 08 Oct 2019 06:28:17 +0900
</lastBuildDate>
<generator>
clj-rss
</generator>
<item>
<guid>
http://dev-happy.com/posts/2019-10-08-4clojure-05.html
</guid>
<link>
http://dev-happy.com/posts/2019-10-08-4clojure-05.html
</link>
<title>
problem 05
</title>
<description>
&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;= &amp;#95;&amp;#95; &amp;#40;conj '&amp;#40;2 3 4&amp;#41; 1&amp;#41;&amp;#41;

&amp;#40;= &amp;#95;&amp;#95; &amp;#40;conj '&amp;#40;3 4&amp;#41; 2 1&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;'&amp;#40;1 2 3 4&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;처음으로 테스트를 통과해야하는 문제가 2개가 되었다. conj는 list 자료형인 경우 앞에 값을 추가를 한다, 2개가 있는 경우 앞에 값부터 차례로 값을 앞으로 추가를 한다. stack이라고 생각하면 쉬울 것 같다. 그러므로’(1 2 3 4)이면 등호를 만족 한다.&lt;/p&gt;
</description>
<pubDate>
Tue, 08 Oct 2019 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://dev-happy.com/posts/2019-10-07-4clojure-04.html
</guid>
<link>
http://dev-happy.com/posts/2019-10-07-4clojure-04.html
</link>
<title>
problem 04
</title>
<description>
&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;= &amp;#40;list &amp;#95;&amp;#95;&amp;#41; '&amp;#40;:a :b :c&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;:a :b :c
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;clojure에서 리스트를 만드는 방법이 여러가지 가 있는데 ‘()로 만드는 방법 (list)로 만드는 방법이 있다. 위 문제는 두가지 방법을 사용하였고 list안에 만족하는 답을 넣어주면 된다. 답은 :a :b :c 이다.&lt;/p&gt;
</description>
<pubDate>
Mon, 07 Oct 2019 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://dev-happy.com/posts/2019-10-06-4clojure-03.html
</guid>
<link>
http://dev-happy.com/posts/2019-10-06-4clojure-03.html
</link>
<title>
problem 03
</title>
<description>
&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;= &amp;#95;&amp;#95; &amp;#40;.toUpperCase &amp;quot;hello world&amp;quot;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;quot;HELLO WORLD&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;clojure에서는 기본적으로 자바의 라이브러리를 사용할 수 있다. 마찬가지로 string에 대한 함수를 호출 할 수 있는데 자바와는 반대로 위와같은 방법으로 호출을 하여 사용 할 수 있다. “HELLO WORLD”로 하면 성립이 된다.&lt;/p&gt;
</description>
<pubDate>
Sun, 06 Oct 2019 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://dev-happy.com/posts/2019-10-05-4clojure-02.html
</guid>
<link>
http://dev-happy.com/posts/2019-10-05-4clojure-02.html
</link>
<title>
problem 02
</title>
<description>
&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;= &amp;#40;- 10 &amp;#40;&amp;#42; 2 3&amp;#41;&amp;#41; &amp;#95;&amp;#95;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;4
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;중간의 계산식에 대한 답을 넣으면 된다 기본적으로 lisp은 안에서 부터 밖으로 계산이 되므로 풀어서 쓴다면 10 - (2 * 3)의 계산 결과가 된다. 4로 하면 등호가 성립이 된다.&lt;/p&gt;
</description>
<pubDate>
Sat, 05 Oct 2019 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://dev-happy.com/posts/2019-10-04-4clojure-01.html
</guid>
<link>
http://dev-happy.com/posts/2019-10-04-4clojure-01.html
</link>
<title>
problem 01
</title>
<description>
&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;= &amp;#40;&amp;#95;&amp;#95; true&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;__ 안에 어떤 값을 넣어야 =를 만족 할수 있는지 부터가 4clojure의 시작이다 true를 넣으면 값이 성립 한다.&lt;/p&gt;
</description>
<pubDate>
Fri, 04 Oct 2019 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://dev-happy.com/posts/2019-10-03-4clojure-start.html
</guid>
<link>
http://dev-happy.com/posts/2019-10-03-4clojure-start.html
</link>
<title>
4clojure 정리
</title>
<description>
&lt;p&gt;clojure 언어를 좋아한다고 해놓고선 아무런 공부의 기록이 없다는 것이 말이 안된다는 생각이 들었다.&lt;/p&gt;&lt;p&gt;그래서 기존에 했던 내용들을 복습을 할 겸 1개씩 정리를 하려고 한다.&lt;/p&gt;&lt;p&gt;쉬운 내용이면 쉽게 가고 좀 생각을 해야할 내용이면 생각 정리와 동시에 시도했던 내용들을 정리를 한다.&lt;/p&gt;
</description>
<pubDate>
Thu, 03 Oct 2019 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://dev-happy.com/posts/2019-10-02-stop-retention.html
</guid>
<link>
http://dev-happy.com/posts/2019-10-02-stop-retention.html
</link>
<title>
리텐션이 낮고 사용자가 감소 또는 유지된다는 것은?
</title>
<description>
&lt;p&gt;마케팅비용을 사용하면서 사용자의 관심을 단기간에 끌긴 하지만 단기간이라고 한다면 증가세가 아니라면 난 제품에 문제가 있다고 생각한다 제품이 좋고, 나의 불편한점을 해결한다면 안쓸이유가 없기 때문이다 사용자는 자신의 불편함을 해결해 주는 제품에 돈을 지불한다&lt;/p&gt;&lt;p&gt;지금 리텐션이 낮고 사용자가 감소 또는 유지가 된다는 것은 내부 직원이 아무런 활동을 하지 않아서가 아니라 애초에 지금의 앱이 사용자의 문제를 해결하지 못한다는 반증이 될 수도 있다 사용자에게 별 필요가 없는 제품이라는 뜻이다 &lt;/p&gt;&lt;p&gt;단기간에 사용자의 리텐션을 올리기 위해 푸시를 자주 보내는 것이 맞는 것인가? 아니면 어떤 불편함을 해결하기 위해서 고민을 하는 것이 맞는 것인가?   &lt;/p&gt;&lt;p&gt;둘다 하는 것이 맞겠지만 리소스는 한정이 되어 있으므로 한정된 리소스 안에서 절충안은 필요하다고 생각한다.&lt;/p&gt;
</description>
<pubDate>
Wed, 02 Oct 2019 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://dev-happy.com/posts/2019-10-01-think-in-box.html
</guid>
<link>
http://dev-happy.com/posts/2019-10-01-think-in-box.html
</link>
<title>
틀안에서 생각한다는 것의 의미
</title>
<description>
&lt;p&gt;혁신이라고 하는 것은 아무 것도 없는 것에서 생기지 않는다고 생각한다 현재의 환경에서 어떻게 한발 더 나아지는지를 고민하는 것이 혁신이라고 생각하고 현재의 리소스를 어떻게 최대한 활용을 할 것인지가 혁신이라고 생각한다&lt;/p&gt;&lt;p&gt;보통은 무엇이 더 나아지면 할 수 있는데 무엇이 더 나아지면 좋아지는데 라는 생각들을 많이 하곤한다 근데 그런 생각들이 오히려 더 나아질 수 있는 것을 방해하는 것이라고 생각 한다&lt;/p&gt;&lt;p&gt;어떠한 단점들만 말하는 것 보다는 그 것들을 해결하기 위해서 지금 내가 할 수 있는 일을 생각하는 것이 더 나아지는 방향이라고 생각한다&lt;/p&gt;
</description>
<pubDate>
Tue, 01 Oct 2019 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://dev-happy.com/posts/2019-09-30-think-extend.html
</guid>
<link>
http://dev-happy.com/posts/2019-09-30-think-extend.html
</link>
<title>
확장성이라는 것에 대한 생각
</title>
<description>
&lt;p&gt;과자를 하나 사러 동네 슈퍼를 갔다가 집으로 돌아가는 중이다 집에서 어머니가 오는길에 고기를 사오라고 한다면? 어떠한 반응을 보여야 할까? 왜 지금 얘기하는지 화내야 할까? 아니면 첨부터 동네 슈퍼를 간 내 탓일까?&lt;/p&gt;&lt;p&gt;어떠한 경우라도 상황이라는 것이 내가 원하는데로만 생각한데로만 될순 없다고 생각한다&lt;/p&gt;&lt;p&gt;그렇다고 모든 경우의 수를 고려해서 할 수도 없다 그렇다면 어떻게 해야할까?&lt;/p&gt;&lt;p&gt;마음으로라도 상황이 수시로 변한다는 것을 인정을 하면서 대응을 하는 것이 맞다고 생각한다&lt;/p&gt;&lt;p&gt;단적이었지만 개발하는 상황에서도 일어날 수 있는 일이다 확정적으로 무언가를 항상 할 수는 없다 시시때때로 변화하는 환경에 내가 잘 대응할 수 있도록 만드는 것이 중요한 것 같다&lt;/p&gt;
</description>
<pubDate>
Mon, 30 Sep 2019 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://dev-happy.com/posts/2019-09-27-how-db-select.html
</guid>
<link>
http://dev-happy.com/posts/2019-09-27-how-db-select.html
</link>
<title>
RDB select에 대한 고찰
</title>
<description>
&lt;p&gt;개발을 하다보면 rdb는 필수로 사용을 하게 된다 &lt;/p&gt;&lt;p&gt;그렇지만 rdb에 있는데이터의 구조를 확장성 있게 사용한다는 것은 또다른 어려움이 있다고 생각한다&lt;/p&gt;&lt;p&gt;rdb 구조를 잘 설계하면 확장성있게 사용 가능한가?라는 질문에는 아니오라고 얘기하고 싶다 그 이유는 2차원으로 사용하는 rdb의 특성상 원하는 구조로 다시 바꾸기란 쉽지만은 않기때문이다&lt;/p&gt;&lt;p&gt;원하는 데이터를 전송할때도 전송할 데이터에 대한 구조만 작성을 하는 것이 확장성이 있을까 하면 아니오이고 필히 수정 또는 확장을 요구하는 현상이 반드시 일어난다고 생각한다&lt;/p&gt;&lt;p&gt;내가 하고 싶은 것은 테이블 전체의 데이터 구조들을 정의 해놓고 select를 하고 원하는 데이터만 선택적으로 전송한다면 변화에는 유용하리라 생각한다&lt;/p&gt;&lt;p&gt;아직 그렇게 작성을 해보진 않아서 얼마나 속도에 영향이 있을지는 모르겠지만 시도해볼만 하다고 생각한다&lt;/p&gt;&lt;p&gt;다시 생각을 해보니 너무 rdb 설계에 의존을 하는 것은 않좋다는 생각이 들었다. db를 먼저 설계 하고 클래스를 설계를 하게 되니 확장성이 안그래도 없는데 더 없어졌다는 생각이 들었고 db를 설계하기 전에 class를 설계하는 습관이 필요하다는 생각이 들었다. 그래야 test 코드도 원하는데로 만들수 있고, 확장 및 변경에 용이하리라 생각한다.&lt;/p&gt;&lt;p&gt;db 보다는 domain이 중요하다.&lt;/p&gt;
</description>
<pubDate>
Fri, 27 Sep 2019 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://dev-happy.com/posts/2019-09-26-sql-vs-java.html
</guid>
<link>
http://dev-happy.com/posts/2019-09-26-sql-vs-java.html
</link>
<title>
SQL query VS java (프로그래밍 언어)
</title>
<description>
&lt;p&gt;java는 알고 있었지만 server 개발을 하면서 query 작성만으로 충분하다고 생각 했었다. 하지만 요즘은 java 로직을 어떻게 작성을 해야할지 더 신경을 쓰게 된다.&lt;/p&gt;&lt;p&gt;매일매일이 다른 변화를 대응을 해야하다보니 query만으로는 한계를 많이 느꼈고 확장성과 유연함을 위해서는 구조 설계 및 아키텍처 설계 능력의 필요성을 자연스럽게 느끼게 되었다.&lt;/p&gt;&lt;p&gt;그래서 최소한으로 db 데이터를 가져 오고,  java 로직에서 더 가공을 할 수 있는 쪽으로 server는 점점 발전을 해 나가고 있다.&lt;/p&gt;&lt;p&gt;프로그래밍의 발전 성향으로 봤을 때도 query쪽으로, db쪽으로 발전을 하기 보다는 server 로직 단에서 더 발전을 하고 있음을 몸소 느끼는 중이다.&lt;/p&gt;&lt;p&gt;Server 부하 관리를 로드 밸런싱이 생겼고, 똑같은 Server를 빠르게 생성을 하기 위해서 docker 가 탄생을 하였다.&lt;/p&gt;&lt;p&gt;Db 부하가 발생하면? db를 추가하는 것은 어려운 기술을 필요로 한다.(요즘에는 AWS에서 손쉽게 읽기 전용으로 생성이 가능하지만 Server의 확장 처럼 유연하게 확장하기는 어렵다고 생각한다.)&lt;/p&gt;&lt;p&gt;query 작성 보다는 orm 쪽으로 언어의 특성에 맞게 다양하게 발전 중이라고 생각한다.&lt;/p&gt;&lt;p&gt;query는 정적이다. 동적으로 무언가를 하기가 어렵고, 서비스를 하는 입장에서 확장을 위해서라면 아키텍처 설계는 필수라는 것을 몸소 체감하고 있다.&lt;/p&gt;&lt;p&gt;한번 만들고 유지보수를 하지 않는 프로젝트라고 한다면 단일로 query를 작성하는게 나을수도 있지만 비즈니스, 서비스를 하는 회사라면 빠른 변화의 대응을 위해서는 로직 작성이 우선이 되어야 한다.&lt;/p&gt;&lt;p&gt;왜 서비스를 하는 회사들이 면접을 볼때 디자인 패턴이니, 구현상의 어려움이니 그런 질문들을 하는 이유가 왜 하는지 조금은 알 것 같다.&lt;/p&gt;&lt;p&gt;그때까지 난 query로 모든 것을 해결 하였기 때문에 어려움이 많이 없었다고 생각한다.&lt;/p&gt;&lt;p&gt;지금도 상품의 Sort 로직 작성을 생각하면서 좀 더 나은 방법이 없는지 이런 문제들은 어떻게 해결을 해야하는게 좋은지 더 나은 방법을 찾으려고 하는 것 자체가 많은 발전이라고 생각한다.(현재 서비스하는 시스템에서는 query로 해결 되어 있지만 확장성은 없다)&lt;/p&gt;&lt;p&gt;10년 이상 프로그래밍을 하였지만 아직 더 가야할 길이 먼거 같다.&lt;/p&gt;
</description>
<pubDate>
Thu, 26 Sep 2019 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://dev-happy.com/posts/2019-09-25-python-reduce.html
</guid>
<link>
http://dev-happy.com/posts/2019-09-25-python-reduce.html
</link>
<title>
Python3 reduce 사용
</title>
<description>
&lt;p&gt;Python에서 어떠한 문제를 해결 하기 위해서 reduce를 사용을 하게 되었다.&lt;/p&gt;&lt;p&gt;예제에서는 list안에서 원하는 인덱스 얻기 위한 상황에서 사용을 하게 되었다. 보통은 아래와 같은 코드로 작성을 하게된다.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;python
select&amp;#95;index = 0
for index, value in enumerate&amp;#40;&amp;#91;1,2,3,4,5,6,7,8&amp;#93;&amp;#41;:
	if value == 5:
		select&amp;#95;index = index
		break
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;조금 뭔가 작위적인 코드가 된거 같긴 한데 위와 비슷한 알고리즘으로 처음에 생각을 하게 되고, 개발자라면 누구나 쉽게 생각할 수 있는 코드의 구조라고 생각을 한다.&lt;/p&gt;&lt;p&gt;하지만 파이썬을 사용을 하다보니 좀 더 쉬운, 간단한 방법은 없을까?라고 생각을 하게 되었고 2번째는 아래와 같은 코드를 생각을 하게 되었다.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;python
#python3에서는 아래코드 import
from functools import reduce

index = reduce&amp;#40;lambda acc, x: x if x&amp;#91;1&amp;#93; == 5 else acc, enumerate&amp;#40;&amp;#91;1,2,3,4,5,6,7,8&amp;#93;&amp;#41;&amp;#41;

index&amp;#91;0&amp;#93; # index 값 추출

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;clojure를 하다보니 reduce라는 함수는 알고 있었고 사용법이 무궁무진 하다는 것을 알고 있었기 때문에 혹시나  python에서도 이런 방법으로 할 수 있지 않을까?라는 생각을 하게 되었고 적용을 하였다.&lt;/p&gt;&lt;p&gt;설명을 한다면 lambda안에서 acc에 누적 값을 저장을 하는 방식인데 보통은 reduce를 아래와 같은 방법으로 사용을 한다.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;python
#python3에서는 아래코드 import
from functools import reduce

sum = reduce&amp;#40;lambda acc, x: acc+x, &amp;#91;1,2,3,4,5,6,7,8&amp;#93;&amp;#41;
#sum의 값은 36
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;어차피 acc에는 list가 순회 할때까지 조건에 맞는 값을 유지 할 수 있을 것 같아서 사용을 하게 되었다.&lt;/p&gt;&lt;p&gt;지금은 리팩토링을 하다보니 reduce 코드보다는 dictionary로 변경을 하여 사용하고 있지만 reduce의 기록을 위해서 남겨둔다.&lt;/p&gt;
</description>
<pubDate>
Wed, 25 Sep 2019 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://dev-happy.com/posts/2019-09-24-experience-python.html
</guid>
<link>
http://dev-happy.com/posts/2019-09-24-experience-python.html
</link>
<title>
Python을 2년 사용해 보고
</title>
<description>
&lt;p&gt;2016년에 본격적으로 사용을 해서 최근까지 웹, 스크립트로 사용을 하고 있다. 처음에는 문법적인 어색함이 커서 적응을 하기 힘들었으나 하면 할 수록 생산성이 올라가는데 일조를 한다는 것을 알게 되었다.&lt;/p&gt;&lt;p&gt;특히, 지금 회사에서 본격적으로 귀찮은 업무들을 모두 Python으로 사용을 하면서 그 매력을 더 잘 느낄 수 있었다.&lt;/p&gt;&lt;p&gt;쉬운 문법 덕분인지는 모르겠지만 무언가 생각을 바로바로 구현을 해보고 테스트를 해보는 것이 장점으로 다가 왔던 것 같다.&lt;/p&gt;&lt;p&gt;무엇보다 더 짧은 방법 더 간결한 방법을 생각을 하게 된다는 것에서 매력을 느꼈다. 사실 다른 언어도 마찬가지일 수 있겠지만 고착화된 언어를 사용하게 되다보면 문법적인 한계로 인하여  더 개선을 해야한다는 의지가 생기진 않는 것 같다.&lt;/p&gt;
</description>
<pubDate>
Tue, 24 Sep 2019 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://dev-happy.com/posts/2018-02-07-why-clojure-blog.html
</guid>
<link>
http://dev-happy.com/posts/2018-02-07-why-clojure-blog.html
</link>
<title>
왜 클로저로 블로그를 만들었는가?
</title>
<description>
&lt;h3 id=&quot;들어가며&quot;&gt;들어가며&lt;/h3&gt;&lt;p&gt; 클로저를 선택하게 된 이유와 왜 클로저로 블로그를 만들었는지에 대한 설명을 한다.&lt;/p&gt;&lt;h3 id=&quot;클로저를&amp;#95;선택하게&amp;#95;된&amp;#95;이유&quot;&gt;클로저를 선택하게 된 이유&lt;/h3&gt;&lt;p&gt; 흔하디 흔한 함수형 프로그래밍과 불변 등등의 특징은 인터넷으로 찾아보면 다 나오므로 개인적으로 선택을 하게 된 이유를 작성을 한다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt; 처음 프로그래밍을 시작하게 되었을 때 C, C++로 하였는데 그 때부터 왜 내 생각을 바로 표현을 할 수가 없는지에 대한 의문을 품게 되었다.&lt;/p&gt;&lt;p&gt; 그런 의문은 업무에 시달리고 바쁘다 보니 잊어버리고 살았었는데 scheme을 접하게 되면서 다시 그 의문들을 다시 생각하게 되었다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt; 물론 완벽하게 내 생각을 표현을 그대로 할 수는 없겠지만 추상성이 높다보니 그래도 만족을 하면서 공부를 하게 되었다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt; 하지만 수 없이 많은 라이브러리들을 바로 사용을 할 수가 없었고 그래서 JAVA와 연동이 가능한 clojure를 선택을 하게 되었다.&lt;/p&gt;&lt;p&gt; 이 글을 쓰고 있는 시점의 나는 아직 LISP 풋내기에 불과 하지만 언젠가는 내 것을 만들 것이라는 희망을 품고 있다.&lt;/p&gt;&lt;p&gt; 컴퓨터 내부가 어떻게 돌아가는지에 대한 생각에 빠져서 살다보니 어느순간 내 생각은 컴퓨터화가 되어 가고 있다는 것을 느끼게 되었다.&lt;/p&gt;&lt;p&gt; 그래서 좀 더 고차원적으로 생각을 하고 싶어서 LISP을 공부를 하는 이유도 있다.&lt;/p&gt;&lt;p&gt; 다른 사람들은 어떻게 생각 할 지는 잘 모르겠지만 개인적인 생각으로 그렇게 느끼게 되어 정리를 하고 싶어서 작성을 하였다.&lt;/p&gt;&lt;h3 id=&quot;클로저로&amp;#95;블로그를&amp;#95;만든&amp;#95;이유&quot;&gt;클로저로 블로그를 만든 이유&lt;/h3&gt;&lt;p&gt; 업무 외의 시간에 무언가 스스로 만들고 싶어서라는 이유가 크다.&lt;br /&gt;  물론 framework는 내가 만든건 아니지만 워낙 작다보니 추가적인 기능들을 추가하기가 쉽다는 것도 장점일 수 있을 것 같다.&lt;/p&gt;
</description>
<pubDate>
Wed, 07 Feb 2018 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://dev-happy.com/posts/2018-01-27-first-post.html
</guid>
<link>
http://dev-happy.com/posts/2018-01-27-first-post.html
</link>
<title>
클로저로 된 블로그 생성
</title>
<description>
&lt;h3 id=&quot;블로그에&amp;#95;작성을&amp;#95;할&amp;#95;글&quot;&gt;블로그에 작성을 할 글&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;새롭게 알게 된 내용 정리&lt;/li&gt;&lt;li&gt;독서 감상문&lt;/li&gt;&lt;li&gt;알고 있는 내용 정리&lt;/li&gt;&lt;li&gt;블로그 테마 수정&lt;/li&gt;&lt;li&gt;알고리즘 문제 풀이&lt;/li&gt;&lt;li&gt;블로그 코드 수정하여 기능 추가&lt;/li&gt;&lt;li&gt;이력서 정리&lt;/li&gt;&lt;li&gt;등등&lt;/li&gt;&lt;/ul&gt;
</description>
<pubDate>
Sat, 27 Jan 2018 00:00:00 +0900
</pubDate>
</item>
</channel>
</rss>
